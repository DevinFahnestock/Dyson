{"ast":null,"code":"var _jsxFileName = \"/Users/devinwall/git/Dyson/packages/frontend/src/components/PlanetView/PlanetView.js\";\nimport React from 'react';\nimport PlanetTile from '../PlanetTile/PlanetTile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlanetView = _ref => {\n  let {\n    socket,\n    user,\n    planets\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Planetview\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Planets:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Planetgrid\",\n      children: [planets && planets.map(planet => /*#__PURE__*/_jsxDEV(PlanetTile, {\n        planet: planet,\n        upgradeClick: () => {\n          socket.emit(\"upgradePlanet\", {\n            planetID: planet.id,\n            userUID: user.uid\n          });\n        }\n      }, planet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this)), !planets && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"You have no Planets!\"\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlanetView;\nexport default PlanetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanetView\");","map":{"version":3,"names":["React","PlanetTile","PlanetView","socket","user","planets","map","planet","emit","planetID","id","userUID","uid"],"sources":["/Users/devinwall/git/Dyson/packages/frontend/src/components/PlanetView/PlanetView.js"],"sourcesContent":["import React from 'react'\nimport PlanetTile from '../PlanetTile/PlanetTile'\n\nconst PlanetView = ({ socket, user, planets }) => {\n  return (\n    <div className=\"Planetview\">\n        <h3>Planets:</h3>\n        <div className=\"Planetgrid\">\n          {planets && planets.map((planet) => (\n            <PlanetTile\n              key={planet.id}\n              planet={planet}\n              upgradeClick={() => {\n                socket.emit(\"upgradePlanet\", {planetID: planet.id, userUID: user.uid})\n              }}\n            />\n          ))}\n          {!planets && (<>You have no Planets!</>)}\n        </div>\n      </div>\n  )\n}\n\nexport default PlanetView"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;;AAEA,MAAMC,UAAU,GAAG,QAA+B;EAAA,IAA9B;IAAEC,MAAF;IAAUC,IAAV;IAAgBC;EAAhB,CAA8B;EAChD,oBACE;IAAK,SAAS,EAAC,YAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,SAAS,EAAC,YAAf;MAAA,WACGA,OAAO,IAAIA,OAAO,CAACC,GAAR,CAAaC,MAAD,iBACtB,QAAC,UAAD;QAEE,MAAM,EAAEA,MAFV;QAGE,YAAY,EAAE,MAAM;UAClBJ,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B;YAACC,QAAQ,EAAEF,MAAM,CAACG,EAAlB;YAAsBC,OAAO,EAAEP,IAAI,CAACQ;UAApC,CAA7B;QACD;MALH,GACOL,MAAM,CAACG,EADd;QAAA;QAAA;QAAA;MAAA,QADU,CADd,EAUG,CAACL,OAAD,iBAAa;QAAA;MAAA,iBAVhB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CAlBD;;KAAMH,U;AAoBN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}